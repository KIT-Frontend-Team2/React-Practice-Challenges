React의 장단점
장점:

성능: React는 Virtual DOM을 사용하여, 변경된 부분만 실제 DOM에 반영하므로 전체적인 성능을 향상 시킨다. (Virtual DOM은 웹페이지와 실제 DOM 사이에서 중간 매개체의 역할을 한다.)

재사용성: React의 컴포넌트 기반 구조는 재사용성을 높여준다. 컴포넌트는 다른 컴포넌트에 중첩하여 사용할 수 있으므로, 코드의 재사용성이 높아진다. (따라서 React로 개발을 하다보면 레고 블록을 조립하는 것처럼 컴포넌트들을 조합해서 웹사이트들을 개발하게 되어 코드의 재사용성이 증가한다.)

유지보수: React의 구조는 컴포넌트 단위로 나누어져 있어서, 코드를 유지보수하기 쉽다.

대중성: React는 매우 인기 있는 라이브러리로서, 대부분의 개발자들이 익숙하므로 개발자 커뮤니티에서의 지원과 자료도 많다.

React Native: React Native를 활용하여 모바일 환경도 개발할 수 있다는 장점이 있다. 보통 모바일 앱을 개발하기 위해서는 안드로이드 같은 경우는 코틀린을 IOS는 스위프트를 배워야하는데 처음으로 모바일 앱개발을 하려는 사람에게는 진입장벽이 높을 수 있는데 (React Native를 사용하면 JS로 한번 개발해서 안드로이드 앱과 IOS 동시에 만들 수 있다.)

단점:

JSX: React는 JSX라는 자체 문법을 사용하는데, 이 문법은 JavaScript와 HTML을 혼합한 것으로 처음 접하는 개발자들에게는 어려울 수 있다.

학습: React는 다른 JavaScript 라이브러리나 프레임워크에 비해 학습곡선이 높다. 따라서 처음 접하는 개발자들은 학습에 시간이 더 걸릴 수 있음. (새로운 버전이 계속 나오므로, 새로 공부할 것도 많음 )

부분적인 기능: React는 UI 라이브러리일 뿐이며, 라우팅, HTTP 요청 등의 부분적인 기능은 따로 구현해야 한다. 따라서 프로젝트 규모가 크고 복잡한 경우, 추가적인 라이브러리를 사용해야 할 수 있음.

높은 상태관리 복잡도: React에는 State라는 개념이 존재하는데 이는 컴포넌트의 상태를 의미한다. Virtual DOM에서 바뀐 부분만을 찾아서 업데이트 한다고 했는데, 즉 이말은 State가 바뀐 부분만을 찾는 다는 것이고 React에서 State라는 개념은 굉장히 중요한 개념이다. React 에서는 성능 최적화를 하기 위해서는 State를 잘 관리하는 것이 중요한데 이것이 생각보다 어렵다. 웹사이트의 규모가 커져서 컴포넌트의 개수가 많아지면 상태관리의 복잡도도 증가한다. (그래서 보통 큰 규모의 프로젝트의 경우 이러한 상태관리를 위해서 Redux, Recoil , Mobx 와 같은 상태관리 라이브러리들을사용한다. )



